#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require("http");
const { config } = require("../model/config");

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Create HTTP server.
 *
 * Listen on provided port, on all network interfaces.
 */
const app = require("../app");

const port = normalizePort(process.env.PORT || config.listenPort || "3010");
app.set("port", port);

const server = http.createServer(app);
server.listen(port);
server.on("listening", () => {
    const addr = server.address();
    console.log('Listening on', addr);
});
server.on("error", (error) => {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
});

/**
 * Create WebSocket IO server
 *
 * see https://socket.io/
 */
const { Server } = require("socket.io");
const io = new Server(server);
const SocketManager = require("./socketManager.");

io.on('connection', (clientSocket) => {
    clientSocket.emit("Hello", "Thank you to connect to SLSV");
    console.log('A user connected');

    clientSocket.on('Hello', (msg) => {
        console.log('A customer say hello: ' + msg);
      });

    SocketManager.initClientSocket(clientSocket);
    console.log('Test SocketManager send message' );

});
